
******************************************************移动端点击事件延迟300毫秒解决办法***********************************************
安装fastclick
npm install fastclick --save
在main.js引入  import fastClick from 'fastclick'

fastClick.attach(document.body)


******************************************************sass的安装***********************************************
npm i node-sass sass-loader --save-dev

<style lang="scss" scoped="" type="text/css"></style>
启动项目要改的文件：config->index.js->autoOpenBrowser->true



******************************************************stylus的安装***********************************************
npm i stylus --save

npm i stylus-loader --save

<style lang="scss" scoped="" type="text/css"></style>






******************************************************安装axios***********************************************
  npm i axios -S

在文件夹里
import axios from 'axios'

const baseURL = 'https://easy-mock.com/mock/5bd3cc7530f55979cdf4c5ba/today/'

axios.defaults.baseURL = baseURL


// 分类的列表
export const getClassifyList = params => { //导出一个方法
  return axios.post('classify_list', params).then(res => res.data)
}





******************************************************安装vueX***********************************************

  npm install vuex -S

// store.js
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)
const state = {
  username: ''
}
const mutations = {
  setUsername: (state, username) => {
    state.username = username
    localStorage.setItem('username', username)
  }
}
const actions = {}
const getters = {
  username: (state) => localStorage.getItem('username')
}
export default new Vuex.Store({
  state,
  getters,
  actions,
  mutations
})

// app.js
import store from './store'

new Vue({
  el: '#app',
  store
})

使用方法
在页面上读取值的方法
this.$store.state.username
在js里面改变值的方法
 this.$store.commit('setUsername', res.data.username)

  




******************************************************移动端的自适应1rem的配置***********************************************


1、npm i lib-flexible -S
  npm i px2rem-loader -D

2、// main.js
import 'lib-flexible'

3、把index.html的<meta name="viewport" content="width=device-width,initial-scale=1.0"> 去掉

4、在build/utils.js里， 在 cssLoader 后再加上一个 px2remLoader
utils.js
var cssLoader = {
  loader: 'css-loader',
  options: {
    minimize: process.env.NODE_ENV === 'production',
    sourceMap: options.sourceMap
  }
}

var px2remLoader = {
  loader: 'px2rem-loader',
  options: {
    remUnit: 75
  }
}
// ...

5、generateLoaders函数里加上px2remLoader
const loaders = options.usePostCSS ? [cssLoader, postcssLoader,px2remLoader] : [cssLoader,px2remLoader]





******************************************************移动端的自适应2vw的配置***********************************************



 npm i  postcss-px-to-viewport postcss-write-svg postcss-cssnext  cssnano --save

 npm i cssnano-preset-advanced --save-dev


接下来在.postcssrc.js文件对新安装的PostCSS插件进行配置：
 module.exports = {
  "plugins": {
    "postcss-import": {},
    "postcss-url": {},
    "postcss-write-svg": {
      utf8: false
    },
    "postcss-cssnext": {},
    "postcss-px-to-viewport": {
      viewportWidth: 750,   // 视窗的宽度，对应的是我们设计稿的宽度，一般是750
      viewportHeight: 1334, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置
      unitPrecision: 3,     // 指定`px`转换为视窗单位值的小数位数
      viewportUnit: "vw",   //指定需要转换成的视窗单位，建议使用vw
      selectorBlackList: ['.ignore', '.hairlines'],// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名
      minPixelValue: 1,     // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值
      mediaQuery: false     // 允许在媒体查询中转换`px`
    },
    "cssnano": {
      preset: "advanced",
      autoprefixer: false,
      "postcss-zindex": false
    }
  }
}



http://jspang.com/

npm i vue-resource --save

******************************************************移动端轮播插件***********************************************
在github上搜索vue-awesome-swiper



